{
  "_args": [
    [
      {
        "name": "customize",
        "raw": "customize@^1.0.0",
        "rawSpec": "^1.0.0",
        "scope": null,
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\akamine\\Documents\\GitHub\\test\\src\\node_modules\\customize-watch"
    ]
  ],
  "_from": "customize@>=1.0.0 <2.0.0",
  "_hasShrinkwrap": false,
  "_id": "customize@1.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/customize",
  "_nodeVersion": "10.16.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/customize_1.1.1_1573160881582_0.4690977854106151"
  },
  "_npmUser": {
    "email": "npm@knappi.org",
    "name": "knappi"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "customize",
    "raw": "customize@^1.0.0",
    "rawSpec": "^1.0.0",
    "scope": null,
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/customize-watch"
  ],
  "_resolved": "https://registry.npmjs.org/customize/-/customize-1.1.1.tgz",
  "_shasum": "0d0a66aa2db11a659581984d372258bc6127f876",
  "_shrinkwrap": null,
  "_spec": "customize@^1.0.0",
  "_where": "C:\\Users\\akamine\\Documents\\GitHub\\test\\src\\node_modules\\customize-watch",
  "author": {
    "email": "npm@knappi.org",
    "name": "Nils Knappmeier",
    "url": "https://github.com/nknapp"
  },
  "bugs": {
    "url": "https://github.com/bootprint/customize/issues"
  },
  "config": {
    "ghooks": {
      "pre-commit": "standard"
    }
  },
  "dependencies": {
    "debug": "^2.2.0",
    "deep-aplus": "^1.0.4",
    "jsonschema": "^1.0.2",
    "jsonschema-extra": "^1.2.0",
    "lodash": "^3.9.3",
    "m-io": "^0.5.0",
    "minimatch": "^3.0.0",
    "q": "^1.4.1"
  },
  "description": "A simple framework to create customizable engines",
  "devDependencies": {
    "chai": "^3.3.0",
    "chai-as-promised": "^5.2.0",
    "clarify": "^2.0.0",
    "ghooks": "^1.0.3",
    "mocha": "^2.3.3",
    "standard": "^14.3.1",
    "stream-to-string": "^1.1.0",
    "thought": "^2.0.0",
    "thought-plugin-jsdoc": "^1.1.0",
    "thoughtful-release": "^0.3.0",
    "trace": "^2.3.0",
    "trace-and-clarify-if-possible": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "fileCount": 9,
    "integrity": "sha512-ldop1CRxbtctT+u8oBcihwoEC78m2xCJ4vyEsz/X/k49k8RouTosZeafkht+GzYKPQSnIdx+n8AZzr8o/zBfsg==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdxIexCRA9TVsSAnZWagAAM0YP/1vfaKUCk1CRCKisDFrp\n2zSbXNVMrcAdNv3HSsXRXSXmVWBu2geiJOuiwIrVryuuTPfsDUfBirz0TfGy\nRhHmoM29YIN9C3hsvc6ejRZP3PtvcEKe6+bFMiwGe4DVGNh+Ct7h7wA55akE\ntltx2ijZwXvrs+APHaeq66pVdsacUI3Rjs2/dvxRkKrm/pcSPQueDcbolMj1\n1pjzb7MyQ2AeRreTrxAzagKFHXLQD0QHNmtZu6sfZlKh+b3kOStZ0uifdSMW\nAeYUanX9TfsbIZ4uQFN9p2NE+eiX1b/s1kQ3TmNuZtakC3Lb5wsTweRcdief\n7oqyDG8Er6YZLNkiUa5YdYz+uAtLZ3KTe0MpT6xFb50+8+u+0A1yNX/4w9wt\nk4cD2NKL3tB08PRz/2gRGLO+I2flQEEqvta11njBnafcp1INNEA+hNVsk5jB\nHt5+dher3ze+A2IN3P35nJwY2FKGULErurfoJZ55G6k/N5Pn06YuBeyISzPm\nK4FF72HNjFZg/aZHyWr6a3bekDeDB9OcXYeDAsJvCxu/yV8Ix5fn+udF2A5/\new7IeuHF8jNOUyvlE5T4l/lVejrcUkUIELT/CjQKHqy+0DaNFcg30eiKqcri\nspVGGFzaaqeEx7vbzFjRkY+eLFYc9cEQBI54hn5zqw+GTe7nxXMa0ztFTYjt\ntHHy\r\n=wHf8\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "0d0a66aa2db11a659581984d372258bc6127f876",
    "tarball": "https://registry.npmjs.org/customize/-/customize-1.1.1.tgz",
    "unpackedSize": 50143
  },
  "gitHead": "2832861087cc9b0a5241450e11b403eed6ff6f89",
  "homepage": "https://github.com/bootprint/customize#readme",
  "keywords": [],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "npm@knappi.org",
      "name": "knappi"
    }
  ],
  "name": "customize",
  "optionalDependencies": {},
  "publishConfig": {
    "tag": "patch-1.x"
  },
  "readme": "# customize \n\n[![NPM version](https://img.shields.io/npm/v/customize.svg)](https://npmjs.com/package/customize)\n[![Travis Build Status](https://travis-ci.org/bootprint/customize.svg?branch=master)](https://travis-ci.org/bootprint/customize)\n[![Coverage Status](https://img.shields.io/coveralls/bootprint/customize.svg)](https://coveralls.io/r/bootprint/customize)\n\n> A simple framework to create customizable engines\n\nCustomize is an abstraction of [bootprint's](https://github.com/nknapp/bootprint) the merging-behaviour. \nIt allows you to create your own projects and engines (other than Less and Handlebars) and create \noverridable configurations for those.\n\nAt its core, it uses [lodash#merge](https://lodash.com/docs#merge) to merge configurations, \nbut it uses a customizer-function that also supports promises and custom overrider functions \nattached to the object.\n\n## Engines\n\n* [customize-engine-handlebars](https://npmjs.com/package/customize-engine-handlebars)\n* [customize-engine-less](https://npmjs.com/package/customize-engine-less)\n* [customize-engine-uglify](https://npmjs.com/package/customize-engine-uglify)\n\n## Used by\n\n* [thought](https://npmjs.com/package/thought)\n* [bootprint](https://npmjs.com/package/bootprint)\n\n\n# Installation\n\n```\nnpm install customize\n```\n\n## Usage \n\nThe following example should demonstrate the usage of Customize and the `files` \nio-helper. Consider the following file tree\n\n<pre><code>\n├─┬ dir1/\n│ ├── a.md\n│ └── b.md\n├─┬ dir2/\n│ └── a.md\n├── engine-concat-files.js\n├── example-buildConfig.js\n├── example1.js\n└── example2.js\n</code></pre>\n\n### Creating an engine\n\nThe first thing we need, is an engine. For now, we create an engine that just\nconcatenates the contents of all files in a directory. We put this engine into\nthe file `engine-concat-files.js` \n\n```js\nvar files = require('customize/helpers-io').files\n\nmodule.exports = {\n  // Optional input schema for engine-configurations\n  // If this is present, the JSON will be validated before being passed into \"preprocessConfig\"\n  schema: {\n    description: 'Path to a directory containing files',\n    type: 'string'\n  },\n\n  // Initial configuration when registering the engine.\n  defaultConfig: null,\n\n  // Files/Dirs to-be-watched with the default configuration\n  defaultWatched: [],\n\n  // This function is called for any `.merge` input.\n  // It converts the input into its mergable form\n  preprocessConfig: function (config) {\n    return files(config)\n  },\n\n  // This function is called to determine the files and directories\n  // to watch in developmentMode\n  watched: function (config) {\n    return [\n      // The config itself is the directory-path\n      config\n    ]\n  },\n\n  // Runs the engine with a resolved configuration.\n  // The config contains no Promises anymore.\n  // The function returns an object\n  //\n  // {\n  //    \"filename.txt\": \"file-contents\"\n  // }\n  //\n  run: function (config) {\n    var result = ''\n    Object.keys(config).forEach(filename => {\n      result += config[filename].contents + '\\n'\n    })\n    return {\n      // Return a file called \"concat.txt\"\n      'concat.txt': result\n    }\n  }\n}\n```\n\n* The engine provides an empty default configuration. This configuration is used \n  as long as no `.merge` and `.load` function is called. \n* The `preprocessor` of the engine assumes that the input configuration for this\n  engine a path to a directory. It then uses the `files` io-helper to convert \n  this path into an object of lazy promises.\n* The `run`-function concatenates the contents of the files. It returns \n  an object \n\n  ```js\n    { \"filename.txt\": \"contents\", ... } \n  ```\n\n  output file. The module [customize-write-files](https://npmjs.com/package/customize-write-files) can be used to \n  write such files to disk in a node environment. In order to this to work, \n  the contents must either be a string, a buffer or a [raadable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable).\n  Strings will be stored in `utf-8` encoding.\n\n### Loading a configuration\n\nIn order to see, how the preprocessor and the `files`-helper works, we can display \nthe configuration after a merge:\n\n```js\nvar customize = require('customize')\n\n// Load files from one directory and merge with second\ncustomize()\n  .registerEngine('files', require('./engine-concat-files'))\n  .merge({\n    files: 'dir1'\n  })\n  .buildConfig()\n  .done(console.log)\n```\n\nThe example creates a new Customize-instances, registers our engine under the name \n`files` and provides the path to a directory as configuration for the `files` engine \n(i.e. as property `files` within the configuration object). It then uses the \n`.buildConfig()` function convert all nested promises to a single promise for the whole\nconfig. This example prints the following result.\n\n```js\n{ files:\n   { 'a.md': { path: 'dir1/a.md', contents: 'First file (from dir1)' },\n     'b.md': { path: 'dir1/b.md', contents: 'Second file (from dir1)' } } }\n```\n\nWe can see that the `files`-call of the preprocessor converted the directory path into \nan object containing a one property for each file in the directory.\n\n### Running the engine \n\nSo far, we have loaded and displayed the preprocessed configuration. Now replace the \n`.buildConfig()`-call by `.run()`\n\n```js\nvar customize = require('customize')\n\n// Load files from one directory\ncustomize()\n  .registerEngine('files', require('./engine-concat-files'))\n  .merge({\n    files: 'dir1'\n  })\n  .run()\n  .get('files')\n  .done(console.log)\n```\n\nThe engines `run()`-method will now be executed with the resolved configuration,\nwhich yields the following output:\n\n```\n{ 'concat.txt': 'First file (from dir1)\\nSecond file (from dir1)\\n' }\n```\n\n### Merging another configuration\n\nWe now have a working customizable configuration. The only thing we have not tried \nyet is to customize it. We are going to assume that someone, maybe Bob, wants to reuse \nthe configuration for my own purposes, because he really likes it, and it really does \nexactly what he was looking for. Almost... Except, that the contents of the first file (`a.md`) \nneeds to be replace by something else. In reality this might be a Handlebars partial to include \ndifferent contents, or an additional Less-file that changes some styles to follow Bob'\ncompany's style-guide.\n\nWe can do this, by merging another configuration, but let's have a look at the directory\ntree before doing this:\n\n<pre><code>\n├─┬ dir1/\n│ ├── a.md\n│ └── b.md\n├─┬ dir2/\n│ └── a.md\n├── engine-concat-files.js\n├── example-buildConfig.js\n├── example1.js\n└── example2.js\n</code></pre>\n\nYou can see that the second directory contains a file `a.md`. We will use this file to\nreplace the file of the first directory.\n\n```js\nvar customize = require('customize')\n\n// Load files from one directory and merge with second\ncustomize()\n  .registerEngine('files', require('./engine-concat-files'))\n  .merge({\n    files: 'dir1'\n  })\n  .merge({\n    files: 'dir2'\n  })\n  .run()\n  .get('files')\n  .done(console.log)\n```\n\nThere is an additional call to `.merge` in this code. Its input is also passed to the \nengine's preprocessor, so now we get two objects containing files and their contents \nand those are merged by the [`.merge`-function of the lodash library](https://lodash.com/docs#merge),\nso that in the above example, the property `a.md` is replace by the value in the \nsecond configuration. So the output of this example is\n\n```\n{ 'concat.txt': 'First file (from dir2)\\nSecond file (from dir1)\\n' }\n```\n\n### Advanced usage\n\nThis is the essence of `customize`. Actually, things are a bit more complicated. \nA custom overrider ensures (in this order)\n\n* that nested objects can provide there own overrider function in a `_customize_custom_overrider`-property,\n* that array-values are concatenated rather than replaced\n* and that promises are correctly merged.\n\nFinally, the `.files()`-helper does not return the file contents directly. It returns a promise for the \nfile contents. This promise is lazy and only evaluated when the `.then()`-method is called. And it uses the \n`Customize.leaf()` method to attach custom overrider, so that a file-promise replaces its predecessor\nwithout `.then()` being called. \nThis means that files, whose contents is overridden by other files, are *not* opened for reading.\n\n### Application of the principles\n\nCurrently, there is only the [thought](https://npmjs.com/package/thought) package uses customize, but [bootprint](https://npmjs.com/package/bootprint) uses the same principle.\n\nIn `thought` the `.thought/partials` directory is included to allow the user to override default Handlebars-partials with\ncustom verison.\n\nIn `bootprint` the user can create packages with Handlebars-partials and Less-definitions, which include and override \npartials and definitions from other packages.\n\n\n\n\n\n\n\n\n\n##  API-reference\n\nThe exported module is a function that creates a new empty Customize-instance.\n\n## Modules\n\n<dl>\n<dt><a href=\"#module_customize\">customize</a></dt>\n<dd><p>Create a new Customize object with an empty configuration</p>\n</dd>\n</dl>\n\n## Members\n\n<dl>\n<dt><a href=\"#jsonschema\">jsonschema</a></dt>\n<dd><p>The configuration file is defined (and validated) by a JSON-schema\n(see <a href=\"./config-schema.js\">the config-schema file</a>) for details.\nWe use the <code>jsonschema</code> module for validation, along the the\n<code>jsonschema-extra</code>-module, because the JSON can contain functions.</p>\n</dd>\n</dl>\n\n<a name=\"module_customize\"></a>\n\n## customize\nCreate a new Customize object with an empty configuration\n\n\n* [customize](#module_customize)\n    * _static_\n        * [.debugState](#module_customize.debugState)\n        * [.debug](#module_customize.debug)\n        * [.Customize](#module_customize.Customize) : <code>customize</code>\n        * [.overrider](#module_customize.overrider) : <code>customOverrider</code>\n        * [.withParent](#module_customize.withParent)\n        * [.leaf](#module_customize.leaf) ⇒ <code>Promise</code>\n    * _inner_\n        * [~Customize](#module_customize..Customize)\n            * [new Customize()](#new_module_customize..Customize_new)\n            * [.registerEngine(id, engine)](#module_customize..Customize+registerEngine)\n            * [.configSchema()](#module_customize..Customize+configSchema)\n            * [.merge(config)](#module_customize..Customize+merge) ⇒ <code>Customize</code>\n            * [.load(customizeModule)](#module_customize..Customize+load) ⇒ <code>Customize</code>\n            * [.buildConfig()](#module_customize..Customize+buildConfig) ⇒ <code>Promise.&lt;object&gt;</code>\n            * [.watched()](#module_customize..Customize+watched) ⇒ <code>Promise.&lt;object.&lt;Array.&lt;string&gt;&gt;&gt;</code>\n            * [.run([options])](#module_customize..Customize+run) ⇒ <code>Promise.&lt;object&gt;</code>\n        * [~customize()](#module_customize..customize) ⇒ <code>Customize</code>\n\n<a name=\"module_customize.debugState\"></a>\n\n### customize.debugState\nFor coverage testing: Expose the debugState object so it can be enabled an disabled in testcases\n\n**Kind**: static property of [<code>customize</code>](#module_customize)  \n<a name=\"module_customize.debug\"></a>\n\n### customize.debug\nFor coverage testing: Expose the debug object so it can be enabled an disabled in testcases\n\n**Kind**: static property of [<code>customize</code>](#module_customize)  \n<a name=\"module_customize.Customize\"></a>\n\n### customize.Customize : <code>customize</code>\nExposes the constructor of the `customize` object\n\n**Kind**: static property of [<code>customize</code>](#module_customize)  \n<a name=\"module_customize.overrider\"></a>\n\n### customize.overrider : <code>customOverrider</code>\nCustom overrider-function (that is used as `customizer` in (lodash#merge)[https://lodash.com/docs#merge]\n\n**Kind**: static property of [<code>customize</code>](#module_customize)  \n<a name=\"module_customize.withParent\"></a>\n\n### customize.withParent\nWrap a function so that if it overrides another function, that function will\nbe available as `this.parent`\n\n**Kind**: static property of [<code>customize</code>](#module_customize)  \n**Read only**: true  \n**Api**: public  \n\n| Param |\n| --- |\n| fn | \n\n<a name=\"module_customize.leaf\"></a>\n\n### customize.leaf ⇒ <code>Promise</code>\nCreate a promise that is regarded as leaf in the configuration tree.\nThat means, that the overrider is not resolving this promise when overriding values.\nPromised object values will not be merged but replaced.\n\n**Kind**: static property of [<code>customize</code>](#module_customize)  \n**Access**: public  \n**Read only**: true  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| promiseOrValue | <code>\\*</code> | a promise or a valude that represents the leaf |\n\n<a name=\"module_customize..Customize\"></a>\n\n### customize~Customize\n**Kind**: inner class of [<code>customize</code>](#module_customize)  \n\n* [~Customize](#module_customize..Customize)\n    * [new Customize()](#new_module_customize..Customize_new)\n    * [.registerEngine(id, engine)](#module_customize..Customize+registerEngine)\n    * [.configSchema()](#module_customize..Customize+configSchema)\n    * [.merge(config)](#module_customize..Customize+merge) ⇒ <code>Customize</code>\n    * [.load(customizeModule)](#module_customize..Customize+load) ⇒ <code>Customize</code>\n    * [.buildConfig()](#module_customize..Customize+buildConfig) ⇒ <code>Promise.&lt;object&gt;</code>\n    * [.watched()](#module_customize..Customize+watched) ⇒ <code>Promise.&lt;object.&lt;Array.&lt;string&gt;&gt;&gt;</code>\n    * [.run([options])](#module_customize..Customize+run) ⇒ <code>Promise.&lt;object&gt;</code>\n\n<a name=\"new_module_customize..Customize_new\"></a>\n\n#### new Customize()\nThis class does the actual work. When calling\n`require('customize')()` a new instance of this\nclass is returned with an empty configuration, so\n`new Customize(...)` should never be called outside\nthis module\n`config` and `parentConfig` are of the form\n\n```js\n{ engine: { config: ..., watched: [ ... ] } }\n```\n\n<a name=\"module_customize..Customize+registerEngine\"></a>\n\n#### customize.registerEngine(id, engine)\nRegister an engine\n\n**Kind**: instance method of [<code>Customize</code>](#module_customize..Customize)  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | the identifier of the engine. This identifier is also used  within the config as key within the configuration object to identify the  sub-configuration stored for this engine. |\n| engine | <code>object</code> | a customize engine that is registered |\n| [engine.defaultConfig] | <code>object</code> | the default configuration of the engine |\n| engine.preprocessConfig | <code>function</code> | a preprocessor to convert a merge-configuration to the internal format of the engine |\n| engine.run | <code>function</code> | the execution function of the engine (the merged config is passed as parameter |\n| engine.run | <code>function</code> | the execution function of the engine (the merged config is passed as parameter) |\n| [engine.schema] | <code>object</code> | a JSON-schema to validate the merge-configurations against. |\n\n<a name=\"module_customize..Customize+configSchema\"></a>\n\n#### customize.configSchema()\nReturns the JSON-schema that configuration objects must match for this\nconfiguration. The schema does not contain main description property\n\n**Kind**: instance method of [<code>Customize</code>](#module_customize..Customize)  \n<a name=\"module_customize..Customize+merge\"></a>\n\n#### customize.merge(config) ⇒ <code>Customize</code>\nCreates a new instance of Customize. The configuration values of the current Customize\nare used as default values and are overridden by the configuration provided as parameter.\n\n**Kind**: instance method of [<code>Customize</code>](#module_customize..Customize)  \n**Returns**: <code>Customize</code> - the new Customize instance  \n**Api**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| config | <code>object</code> | configuration overriding the current configuration |\n\n<a name=\"module_customize..Customize+load\"></a>\n\n#### customize.load(customizeModule) ⇒ <code>Customize</code>\nInherit configuration config from another module.\na Customizer-module usually exports a `function(Customize):Customize`\nwhich in tern calls `Customize.merge` to create a new Customize instance.\nThis function needs to be passed in here.\n\nA new Customize will be returned that overrides the current configuration\nwith the configuration of the module.\n\n**Kind**: instance method of [<code>Customize</code>](#module_customize..Customize)  \n**Returns**: <code>Customize</code> - the Customize instance returned by the module  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| customizeModule | <code>function</code> | that receives a Customize as paramater  and returns a Customize with changed configuration. |\n\n<a name=\"module_customize..Customize+buildConfig\"></a>\n\n#### customize.buildConfig() ⇒ <code>Promise.&lt;object&gt;</code>\nReturn a promise for the merged configuration.\nThis functions is only needed to inspect intermediate configuration results\n(i.e. for testing and documentation purposes)\n\n**Kind**: instance method of [<code>Customize</code>](#module_customize..Customize)  \n**Returns**: <code>Promise.&lt;object&gt;</code> - a promise for the whole configuration  \n**Access**: public  \n<a name=\"module_customize..Customize+watched\"></a>\n\n#### customize.watched() ⇒ <code>Promise.&lt;object.&lt;Array.&lt;string&gt;&gt;&gt;</code>\nReturn a promise for the files needing to be watched in watch-mode,\nindexed by engine.\n\n**Kind**: instance method of [<code>Customize</code>](#module_customize..Customize)  \n**Returns**: <code>Promise.&lt;object.&lt;Array.&lt;string&gt;&gt;&gt;</code> - a promise for the files to be watched.  \n**Access**: public  \n<a name=\"module_customize..Customize+run\"></a>\n\n#### customize.run([options]) ⇒ <code>Promise.&lt;object&gt;</code>\nRun each engine with its part of the config.\n\n**Kind**: instance method of [<code>Customize</code>](#module_customize..Customize)  \n**Returns**: <code>Promise.&lt;object&gt;</code> - an object containing on property per registered engine\n (the key is the engine-id) containing the result of each engine  \n**Access**: public  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [options] | <code>object</code> | optional paramters |\n| [options.onlyEngine] | <code>string</code> | optionally the name of an engine, if only a single engine should  be executed |\n\n<a name=\"module_customize..customize\"></a>\n\n### customize~customize() ⇒ <code>Customize</code>\n**Kind**: inner method of [<code>customize</code>](#module_customize)  \n**Api**: public  \n<a name=\"jsonschema\"></a>\n\n## jsonschema\nThe configuration file is defined (and validated) by a JSON-schema\n(see [the config-schema file](./config-schema.js)) for details.\nWe use the `jsonschema` module for validation, along the the\n`jsonschema-extra`-module, because the JSON can contain functions.\n\n**Kind**: global variable  \n\n\n## IO/Helpers\n\n\n## Functions\n\n<dl>\n<dt><a href=\"#readFiles\">readFiles(directoryPath, [options])</a> ⇒ <code>Promise.&lt;object.&lt;string, Promise.&lt;{path:string, contents:string}&gt;&gt;&gt;</code></dt>\n<dd><p>An overridable directory which resolves to the contents of all its files (recursively).\nReturns an undefined value if the directory path is undefined.</p>\n</dd>\n<dt><del><a href=\"#files\">files(directoryPath, [options])</a> ⇒ <code>Promise.&lt;object.&lt;string, Promise.&lt;{path:string, contents:string}&gt;&gt;&gt;</code></del></dt>\n<dd><p>An overridable directory which resolves to the contents of all its files (recursively).\nReturns an undefined value if the directory path is undefined.\nThe contents of each file is a UTF-8 encoded string.</p>\n</dd>\n</dl>\n\n<a name=\"readFiles\"></a>\n\n## readFiles(directoryPath, [options]) ⇒ <code>Promise.&lt;object.&lt;string, Promise.&lt;{path:string, contents:string}&gt;&gt;&gt;</code>\nAn overridable directory which resolves to the contents of all its files (recursively).\nReturns an undefined value if the directory path is undefined.\n\n**Kind**: global function  \n**Returns**: <code>Promise.&lt;object.&lt;string, Promise.&lt;{path:string, contents:string}&gt;&gt;&gt;</code> - an object containing\n   the relative file-path from the directoryPath as key and the file-path and the file-contents as value  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| directoryPath | <code>string</code> \\| <code>null</code> \\| <code>undefined</code> | the path to the directory |\n| [options] | <code>object</code> |  |\n| [options.glob] | <code>string</code> | an optional glob pattern for filtering files |\n| [options.stream] | <code>boolean</code> | if set to true, the contents of a file will be a readable stream   instead of the actual data. |\n| [options.encoding] | <code>string</code> | the file is expected to be encoded. This means that the   instead of a Buffer, a string is returned. If the 'stream' option is set, the stream's encoding   will be set via [readable.setEncoding(encoding)](https://nodejs.org/api/stream.html#stream_readable_setencoding_encoding) |\n\n<a name=\"files\"></a>\n\n## ~~files(directoryPath, [options]) ⇒ <code>Promise.&lt;object.&lt;string, Promise.&lt;{path:string, contents:string}&gt;&gt;&gt;</code>~~\n***Deprecated***\n\nAn overridable directory which resolves to the contents of all its files (recursively).\nReturns an undefined value if the directory path is undefined.\nThe contents of each file is a UTF-8 encoded string.\n\n**Kind**: global function  \n**Returns**: <code>Promise.&lt;object.&lt;string, Promise.&lt;{path:string, contents:string}&gt;&gt;&gt;</code> - an object containing\n   the relative file-path from the directoryPath as key and the file-path and the file-contents as value  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| directoryPath | <code>string</code> \\| <code>null</code> \\| <code>undefined</code> | the path to the directory |\n| [options] | <code>object</code> |  |\n| [options.glob] | <code>string</code> | an optional glob pattern for filtering files |\n\n\n\n\n\n# License\n\n`customize` is published under the MIT-license.\n\nSee [LICENSE.md](LICENSE.md) for details.\n\n\n# Release-Notes\n \nFor release notes, see [CHANGELOG.md](CHANGELOG.md)\n \n# Contributing guidelines\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bootprint/customize.git"
  },
  "scripts": {
    "format": "standard --fix",
    "preversion": "npm run thoughtcheck",
    "test": "mocha && standard",
    "thought": "thought run -a",
    "thoughtcheck": "thought check-engines",
    "version": "thoughtful changelog -o -a && npm run thought"
  },
  "standard": {
    "ignore": [
      "test/fixtures/**"
    ]
  },
  "version": "1.1.1"
}
